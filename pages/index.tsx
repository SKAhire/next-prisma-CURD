import type { NextPage } from "next";
import Head from "next/head";
import { useState } from "react";
import prisma from "../prisma/prisma";
import { GetServerSideProps } from "next";
import { useRouter } from "next/router";

interface FormData {
  title: string;
  content: string;
  id: string;
}

// Array interface
interface Notes {
  notes: {
    id: string;
    title: string;
    content: string;
  }[];
}

// Load notes from getServerSideProps server side rendering
const Home: NextPage<Notes> = ({ notes }) => {
  const [form, setForm] = useState<FormData>({
    title: "",
    content: "",
    id: "",
  });
  const [newNote, setNewNote] = useState<Boolean>(true);
  const router = useRouter();

  const refreshData = () => {
    router.replace(router.asPath);
  };

  async function handleSubmit(data: FormData) {
    // console.log(data)
    // console.log(newNote)

    try {
      if (newNote) {
        // Check input is not blank
        if (data.title) {
          // CREATE
          fetch("api/create", {
            body: JSON.stringify(data),
            headers: {
              "Content-Type": "application/json",
            },
            method: "POST",
          }).then(() => {
            setForm({ title: "", content: "", id: "" });
            refreshData();
          });
        } else {
          alert("Title can not be blank");
        }
      } else {
        // UPDATE
        fetch(`api/note/${data.id}`, {
          body: JSON.stringify(data),
          headers: {
            "Content-Type": "application/json",
          },
          method: "PUT",
        }).then(() => {
          setForm({ title: "", content: "", id: "" });
          setNewNote(true);
          refreshData();
        });
      }
    } catch (error) {
      console.log(error);
    }
  }

  async function updateNote(title: string, content: string, id: string) {
    //console.log(title, content, id)
    setForm({ title, content, id });
    setNewNote(false);
  }

  async function deleteNote(id: string) {
    try {
      fetch(`api/note/${id}`, {
        headers: {
          "Content-Type": "application/json",
        },
        method: "DELETE",
      }).then(() => {
        refreshData();
      });
    } catch (error) {
      console.log(error);
    }
  }

  function handleCancel() {
    setForm({ title: "", content: "", id: "" });
    setNewNote(true);
  }

  return (
    <>
      <Head>
        <title>Notes</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <section className="border-red-500 bg-gray-200 min-h-screen py-10 flex items-center flex-col justify-center">
        <div className="bg-gray-100 p-5 rounded-2xl w-[85%] shadow-lg max-w-3xl">
          <h1 className="text-center font-bold text-2xl m-4">Notes</h1>
          <form
            className="w-[80%]  mx-auto space-y-6 "
            onSubmit={(e) => {
              e.preventDefault();
              handleSubmit(form);
            }}
          >
            <input
              type="text"
              placeholder="Title"
              value={form.title}
              onChange={(e) => setForm({ ...form, title: e.target.value })}
              className="w-full px-4 py-3 rounded-lg bg-gray-200 mt-2 border focus:border-purple-700 focus:bg-white focus:outline-none text-black"
            />
            <textarea
              placeholder="Content"
              value={form.content}
              onChange={(e) => setForm({ ...form, content: e.target.value })}
              className="w-full px-4 py-3 rounded-lg bg-gray-200 mt-2 border focus:border-purple-700 focus:bg-white focus:outline-none text-black"
            />
            {newNote ? (
              <button
                type="submit"
                className="w-full block bg-purple-700 hover:bg-purple-400 focus:bg-purple-400 text-white font-semibold rounded-lg
                px-4 py-3 mt-6"
              >
                Add +
              </button>
            ) : (
              <>
                <button
                  type="submit"
                  className="w-full block bg-purple-700 hover:bg-purple-400 focus:bg-purple-400 text-white font-semibold rounded-lg
                px-4 py-3 mt-6"
                >
                  Update
                </button>
                <button
                  onClick={handleCancel}
                  className="bg-red-500 w-full block hover:bg-red-400 focus:bg-red-400 text-white font-semibold rounded-lg
                px-4 py-3 mt-6"
                >
                  Cancel
                </button>
              </>
            )}
          </form>
        </div>
        <div className="w-full mt-10 space-y-6 max-w-3xl">
          <h2 className="text-center font-bold text-xl mt-4">Saved Notes</h2>

          {notes.map((note) => (
            <div
              key={note.id}
              className="bg-gray-100 p-5 rounded-2xl w-[100%] hover:shadow-xl shadow-lg max-w-3xl"
            >
              <div className=" w-[100%] flex items-center justify-between ">
                <div className="">
                  <h3 className="font-bold">{note.title}</h3>
                  <p className="text-sm">{note.content}</p>
                </div>
                <div className="flex">
                  <button
                    onClick={() =>
                      updateNote(note.title, note.content, note.id)
                    }
                    className="bg-purple-700 hover:bg-purple-400 px-3 py-1 m-1 text-white rounded"
                  >
                    Edit
                  </button>
                  <button
                    onClick={() => deleteNote(note.id)}
                    className="bg-red-500 hover:bg-red-700 px-3 m-1 text-white rounded"
                  >
                    X
                  </button>
                </div>
              </div>
            </div>
          ))}
        </div>
      </section>
    </>
  );
};

export default Home;

// Server side rendering on every request
export const getServerSideProps: GetServerSideProps = async () => {
  // READ all notes from DB
  const notes = await prisma?.note.findMany({
    select: {
      title: true,
      id: true,
      content: true,
    },
  });

  return {
    props: {
      notes,
    },
  };
};
